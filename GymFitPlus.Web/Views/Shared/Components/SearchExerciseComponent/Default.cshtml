@model AllExercisesQueryModel

<form asp-controller="Exercise" asp-action="Index" method="get">
    <div class="row">
        <div class="form-group col-md-3 d-flex justify-content-between">
            <div class="form-group ">
                <select asp-for="Category" class="form-style" style="color: #ffeba7" aria-required="true">
                    <option disabled selected value="" style="color: #ffffff">Muscle group</option>
                    @foreach (var muscleGroup in Enum.GetValues(typeof(MuscleGroup)))
                    {
                        <option style="color: #ffffff" value="@muscleGroup">@muscleGroup</option>
                    }
                </select>
                <i class="input-icon ion--body-outline"></i>
            </div>
        </div>

        <div class="form-group col-md-3">
            <input asp-for="SearchTerm" class="form-control" placeholder="Search">
        </div>

        <div class="form-group col-md-3">
            <div class="form-group">
                <select asp-for="Sorting" class="form-style" style="color: #ffeba7" aria-required="true">
                    <option disabled selected value="" style="color: #ffffff">Muscle group</option>
                    @foreach (var sorting in Enum.GetValues(typeof(ExerciseSorting)))
                    {
                        <option style="color: #ffffff" value="@sorting">@sorting</option>
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3">
            <div class="form-group mt-4 p-2">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>


@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalExerciseCount /
        Model.ExercisePerPage);
}

<div class="row mb-5">
    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start">
        <a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
           asp-controller="Exercise"
           asp-action="Index"
           asp-route-currentPage="@previousPage"
           asp-route-category="@Model.Category"
           asp-route-searchTerm="@Model.SearchTerm"
           asp-route-sorting="@((int)Model.Sorting)"><<</a>
    </div>

    @{
        var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
        !Model.Exercises.Any();
    }

    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
        <a class="btn btn-primary
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
           asp-controller="Exercise"
           asp-action="Index"
           asp-route-currentPage="@(Model.CurrentPage + 1)"
           asp-route-category="@Model.Category"
           asp-route-searchTerm="@Model.SearchTerm"
           asp-route-sorting="@((int)Model.Sorting)">>></a>
    </div>
</div>